// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI-powered comparable property selection tool that scores explainability.
 *
 * - selectComparables - A function that handles the comparable property selection process.
 * - SelectComparablesInput - The input type for the selectComparables function.
 * - SelectComparablesOutput - The return type for the selectComparables function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SelectComparablesInputSchema = z.object({
  propertyDescription: z
    .string()
    .describe('The description of the property to find comparables for.'),
  marketData: z.string().describe('Market data to use for finding comparable properties.'),
});
export type SelectComparablesInput = z.infer<typeof SelectComparablesInputSchema>;

const SelectComparablesOutputSchema = z.object({
  comparableProperties: z
    .array(z.string())
    .describe('The list of comparable properties, ranked by explainability score.'),
});
export type SelectComparablesOutput = z.infer<typeof SelectComparablesOutputSchema>;

export async function selectComparables(input: SelectComparablesInput): Promise<SelectComparablesOutput> {
  return selectComparablesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'selectComparablesPrompt',
  input: {schema: SelectComparablesInputSchema},
  output: {schema: SelectComparablesOutputSchema},
  prompt: `You are a real estate valuation expert. Given the description of a property and market data, select the most comparable properties and rank them by explainability score.

Property Description: {{{propertyDescription}}}

Market Data: {{{marketData}}}

Return the comparable properties, ranked by explainability score.`,
});

const selectComparablesFlow = ai.defineFlow(
  {
    name: 'selectComparablesFlow',
    inputSchema: SelectComparablesInputSchema,
    outputSchema: SelectComparablesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
